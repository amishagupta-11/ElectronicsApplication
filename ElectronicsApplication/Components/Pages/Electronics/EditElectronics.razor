@page "/electronics/edit/{id:int}"
@using ElectronicsApplication.Models
@using ElectronicsApplication.Services
@inject ElectronicServices ItemService
@inject NavigationManager NavigationManager

<h3>Edit Electronic Item</h3>

@if (Item != null)
{
    <form @onsubmit="SubmitForm">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" class="form-control" @bind="@Item.Name" required />
        </div>
        <div class="form-group">
            <label for="description">Description:</label>
            <input type="text" id="description" class="form-control" @bind="@Item.Description" required />
        </div>
        <div class="form-group">
            <label for="price">Price:</label>
            <input type="number" id="price" class="form-control" @bind="@Item.Price" step="0.01" required />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </form>
}
else
{
    <p><strong>Error:</strong> @errorMessage</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    Electronics? Item;
    string? errorMessage;

    /// <summary>
    /// method to initalize the methods and get the data based on id
    /// </summary>
    /// <returns></returns>

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await ItemService.GetProductByIdAsync(Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";

        }
    }

    /// <summary>
    /// method to redirect to electronics page on submitting the data
    /// </summary>
    /// <returns></returns>

    private async Task SubmitForm()
    {
        try
        {
            await ItemService.UpdateProductAsync(Item);
            NavigationManager.NavigateTo("/electronics");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: { ex.Message}";

        }
    }

}
